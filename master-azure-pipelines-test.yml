# trigger:
#   branches:
#     include:
#     - master
#   paths:
#     include:
#     - src/*
steps:
  - task: NuGetCommand@2
    inputs:
      command: custom
      arguments: install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
    displayName: 'install gitversion'

  - script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
    displayName: 'fetch version'  

  - task: DockerCompose@0
    displayName: Run the services
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Dev/Test'
      azureContainerRegistry: '{"loginServer":"moapdevseaacr.azurecr.io", "id" : "/subscriptions/f4085210-e524-4919-9534-63c2194835ed/resourceGroups/moap-dev-sea-rg/providers/Microsoft.ContainerRegistry/registries/moapdevseaacr"}'
      dockerComposeFile: 'docker-compose.yml'
      additionalDockerComposeFiles: 'test.yml'
      action: Run services
      additionalImageTags: '$(GitVersion.NuGetVersion)'
      buildImages: false

  - task: Bash@3
    displayName: Migrate Idp database
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDB --sql=src/idp/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Idp;User=sa;Password=Pass1234$;TrustServerCertificate=True'

  - task: Bash@3
    displayName: Migrate Product database
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDB --sql=src/api/product-service/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Product;User=sa;Password=Pass1234$;TrustServerCertificate=True'

############## TESTING #################
  - task: Bash@3
    displayName: Seed product data test
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDb --sql=src/api/product-service/test/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Product;User=sa;Password=Pass1234$;TrustServerCertificate=True'

  - task: Bash@3
    displayName: Run product integration test
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=Test --projects=src/api/product-service/**/*Test.csproj --output=$(Build.ArtifactStagingDirectory)/product
    env:
      Postman__Collection: $(PostmanCollection)
      Postman__Environment: $(PostmanEnvironment)
  
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish the product code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.ArtifactStagingDirectory)/product/tests.cobertura.xml'
  - task: Bash@3
    displayName: Postman Test
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        sudo npm install newman -g
        sudo npm install newman-reporter-htmlextra -g
        newman run $(PostmanCollection) --environment $(PostmanEnvironment) -n $(PostmanRunRound) --color on -k -r cli,htmlextra,junit --reporter-htmlextra-export $(GitVersion.NuGetVersion).postman.test.html --reporter-junit-export $(GitVersion.NuGetVersion).postman.test.xml
    continueOnError: true
 
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '*.postman.test.xml'
  - task: AzureCLI@2
    displayName: Copy test file to blob
    inputs:
      azureSubscription: 'Dev/Test'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
          az storage container create -n reports --account-name $(StorageAccountName) --account-key $(StorageAccountKey)
          az storage blob upload -c reports -n postman/tests/$(GitVersion.NuGetVersion).postman.test.html -f $(GitVersion.NuGetVersion).postman.test.html --account-name $(StorageAccountName) --account-key $(StorageAccountKey)

############## END TESTING #################