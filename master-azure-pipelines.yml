trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
steps:
  - task: NuGetCommand@2
    inputs:
      command: custom
      arguments: install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion
    displayName: 'install gitversion'

  - script: mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
    displayName: 'fetch version'  

  - task: DockerCompose@0
    displayName: Build software
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Dev/Test'
      azureContainerRegistry: '{"loginServer":"moapdevseaacr.azurecr.io", "id" : "/subscriptions/f4085210-e524-4919-9534-63c2194835ed/resourceGroups/moap-dev-sea-rg/providers/Microsoft.ContainerRegistry/registries/moapdevseaacr"}'
      dockerComposeFile: 'docker-compose.yml'
      additionalDockerComposeFiles: 'development.yml'
      action: Build services
      additionalImageTags: '$(GitVersion.NuGetVersion)'
      
  - task: DockerCompose@0
    displayName: Run the services
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Dev/Test'
      azureContainerRegistry: '{"loginServer":"moapdevseaacr.azurecr.io", "id" : "/subscriptions/f4085210-e524-4919-9534-63c2194835ed/resourceGroups/moap-dev-sea-rg/providers/Microsoft.ContainerRegistry/registries/moapdevseaacr"}'
      dockerComposeFile: 'docker-compose.yml'
      additionalDockerComposeFiles: 'development.yml'
      action: Run services
      additionalImageTags: '$(GitVersion.NuGetVersion)'
      buildImages: false

  - task: Bash@3
    displayName: Migrate Idp database
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDB --sql=src/idp/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Idp;User=sa;Password=Pass1234$;TrustServerCertificate=True'

  - task: Bash@3
    displayName: Migrate Product database
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDB --sql=src/api/product-service/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Product;User=sa;Password=Pass1234$;TrustServerCertificate=True'

############## TESTING #################
  - task: Bash@3
    displayName: Seed product data test
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=MigrateDb --sql=src/api/product-service/test/sql
    env:
      ConnectionString__Default: 'Server=127.0.0.1;Database=Product;User=sa;Password=Pass1234$;TrustServerCertificate=True'

  - task: Bash@3
    displayName: Run product integration test
    inputs:
      targetType: 'inline'
      script: |
        # Set executable for build.sh
        chmod +x build.sh
        ./build.sh --target=Test --projects=src/api/product-service/**/*Test.csproj --output=$(Build.ArtifactStagingDirectory)/product
    env:
      Postman__Collection: $(PostmanCollection)
      Postman__Environment: $(PostmanEnvironment)
  
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish the product code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.ArtifactStagingDirectory)/product/tests.cobertura.xml'

  - task: Npm@1
    inputs:
      command: 'custom'
      customCommand: 'install newman -g'
  # - task: Bash@3
  #   displayName: Run newman
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       # Set executable for build.sh
  #       npm install newman
  #       newman run $(PostmanCollection) --environment $(PostmanEnvironment) --color on -k -r cli,htmlextra --reporter-htmlextra-export $BUILD_DEFINITIONID-$BUILD_BUILDID.postman.test.html
  - task: NewmanPostman@4
    displayName: New man run
    inputs:
      collectionSourceType: 'url'
      collectionURL: '$(PostmanCollection)'
      environmentSourceType: 'url'
      environmentUrl: '$(PostmanEnvironment)'
      ignoreRedirect: false
      sslInsecure: true
      reporters: 'cli, htmlextra'
      reporterHtmlExtraTemplate: $BUILD_DEFINITIONID-$BUILD_BUILDID.postman.test.html
      htmlExtraReportTitle: 'Postman Test'
  - task: AzureFileCopy@4
    displayName: Copy test file
    inputs:
      SourcePath: '*.postman.test.html'
      azureSubscription: 'Dev/Test'
      Destination: 'AzureBlob'
      storage: 'cs11003bffd9d07d628'
      ContainerName: 'reports'
      BlobPrefix: 'postmantest'


############## END TESTING #################   

  - task: DockerCompose@0
    displayName: Publish software into registry
    inputs:
      containerregistrytype: 'Azure Container Registry'
      azureSubscription: 'Dev/Test'
      azureContainerRegistry: '{"loginServer":"moapdevseaacr.azurecr.io", "id" : "/subscriptions/f4085210-e524-4919-9534-63c2194835ed/resourceGroups/moap-dev-sea-rg/providers/Microsoft.ContainerRegistry/registries/moapdevseaacr"}'
      dockerComposeFile: 'docker-compose.yml'
      additionalDockerComposeFiles: 'development.yml'
      action: Push services
      additionalImageTags: '$(GitVersion.NuGetVersion)'
 